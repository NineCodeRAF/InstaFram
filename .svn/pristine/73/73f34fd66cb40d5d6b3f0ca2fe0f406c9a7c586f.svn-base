package view.panels;

import java.awt.BorderLayout;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.UIManager;

import model.myTree.ModulNode;
import model.myTree.MyTreeNode;
import model.myTree.ParametarNode;
import view.MainFrame;


public class InstallLastPanel extends JPanel{
	private JLabel lbFinish = new JLabel("Installation was successfully executed.");
	private JButton btnFinish = new JButton("Finish");
	private ArrayList<ModulNode> modules;
	private ModulNode module;
	private boolean hasStart = false;
	
	public InstallLastPanel(ModulNode module){
		this.module = module;
		init();
		addActions();
	}
	
	public void init(){
		JPanel bottomPanel = new JPanel();
		JPanel centralPanel = new JPanel();
		
		BorderLayout borderLayout = new BorderLayout(10,10);
		FlowLayout flowLayout = new FlowLayout(FlowLayout.CENTER,10,10);
		FlowLayout fileFlowLayout = new FlowLayout(FlowLayout.CENTER,10,10);
		
		btnFinish.setPreferredSize(new Dimension(150,50));
		
		centralPanel.setLayout(fileFlowLayout);
		bottomPanel.setLayout(flowLayout);
		
		setLayout(borderLayout);
		
		centralPanel.add(lbFinish); 
		
		bottomPanel.add(btnFinish);
		
		this.add(bottomPanel, BorderLayout.SOUTH);
		this.add(centralPanel,BorderLayout.CENTER);
	}

	private void addActions() {
		btnFinish.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				addStartFunc();
				
				if(hasStart){
					try {
						Desktop.getDesktop().open(new File(module.getFilePath()));
					} catch (IOException err) {
						err.printStackTrace();
					}
				}
				setLookAndFeel();
				MainFrame.getInstance().getInstallFirstPanel().dispose();
			}
		});
	}
	
	private void addStartFunc() {
		for(MyTreeNode node : module.getChildren()) {
			if(node instanceof ParametarNode) {
				ParametarNode parameter = (ParametarNode) node;
				
				if(parameter.getType().equals("Start up")) {
					hasStart = parameter.isStartUp();
				}else if(parameter.getType().equals("Custom")) {
					hasStart = parameter.isStartUp();
				}
			}
		}
	}
	
	private static void setLookAndFeel() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
