package view.panels;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Path;

import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.JProgressBar;
import javax.swing.Timer;

import model.myTree.ModulNode;
import model.myTree.MyTreeNode;
import model.myTree.ParametarNode;
import view.MainFrame;


public class InstallThirdScreen extends JPanel{
	
	private static final int MY_MINIMUM = 0;
	private static final int MY_MAXIMUM = 100;
	
	private JButton btnNext = new JButton("Next");
	private JProgressBar pbar;
	private ModulNode module;
	private String shortcutName = "";
	private boolean hasShortcut = false;
	private InstallLastPanel lastPanel;
	
	public InstallThirdScreen(ModulNode module) {
		this.module = module;
		init();

		addTimer();
		addActions();
	}
	
	private void init() {
		JPanel bottomPanel = new JPanel();
		JPanel centralPanel = new JPanel();
		
		BorderLayout borderLayout = new BorderLayout(10,10);
		FlowLayout flowLayout = new FlowLayout(FlowLayout.RIGHT,10,10);
		FlowLayout fileFlowLayout = new FlowLayout(FlowLayout.CENTER,10,10);
		
		pbar = new JProgressBar();
		pbar.setMinimum(MY_MINIMUM);
		pbar.setMaximum(MY_MAXIMUM);
		
		pbar.setPreferredSize(new Dimension(300, 30));
		btnNext.setPreferredSize(new Dimension(150,50));
		btnNext.setEnabled(false);
		
		centralPanel.setLayout(fileFlowLayout);
		bottomPanel.setLayout(flowLayout);
		
		setLayout(borderLayout);
		
		centralPanel.add(pbar); 
		
		bottomPanel.add(btnNext);
		
		this.add(bottomPanel, BorderLayout.SOUTH);
		this.add(centralPanel,BorderLayout.CENTER);
	}
	
	private void addTimer() {
		int timerDelay = 10;
		  new Timer(timerDelay , new ActionListener() {
		     private int index = 0;
		     private int maxIndex = 100;
		     public void actionPerformed(ActionEvent e) {
		        if (index < maxIndex) {
		        	pbar.setValue(index);
		           index++;
		        } else {
		        	pbar.setValue(maxIndex);
		           ((Timer)e.getSource()).stop();
		        }
		        if(pbar.getValue() == maxIndex){
		        	btnNext.setEnabled(true);
		        }
		     }
		  }).start();
	}
	
	private void addActions() {
		btnNext.addActionListener(new ActionListener() {
			@Override
			public void actionPerformed(ActionEvent e) {
				lastPanel = new InstallLastPanel(module);
				MainFrame.getInstance().getInstallFirstPanel().changeContentPane(lastPanel);
				//------------------------------------------------------
				addShortcutName();
				
				if(hasShortcut){
					String[] s = module.getFilePath().split("\\.");
					String str = javax.swing.filechooser.FileSystemView.getFileSystemView().getHomeDirectory().toString() +
							File.separator + shortcutName + "." + s[1];
					
					File sourceFile = new File(module.getFilePath());
					File destinationFile = new File(str);
					
					Path sourcePath = sourceFile.toPath();
					Path destinationPath = destinationFile.toPath();
					try {
						Files.copy(sourcePath, destinationPath);
					} catch (IOException e1) {
						e1.printStackTrace();
					}
				}
			}
		});
	}
	
	private void addShortcutName() {
		for(MyTreeNode node : module.getChildren()) {
			if(node instanceof ParametarNode) {
				ParametarNode parameter = (ParametarNode) node;
				
				if(parameter.getType().equals("Name")) {
					shortcutName = parameter.getName();
				}else if(parameter.getType().equals("Desktop shortcut")) {
					hasShortcut = parameter.isShortcut();
				}else if(parameter.getType().equals("Custom")) {
					shortcutName = parameter.getName();
					hasShortcut = parameter.isShortcut();
				}
			}
		}
		
		if(shortcutName.equals("")) {
			shortcutName = "default";
		}
	}

	public void updateBar(int newValue) {
		pbar.setValue(newValue);
	}

}
