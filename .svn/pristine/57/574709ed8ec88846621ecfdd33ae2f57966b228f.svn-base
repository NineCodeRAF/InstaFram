package view.dialogs;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.LayoutManager;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;

import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;

import actions.ActionManager;
import model.myTree.ModulNode;
import model.myTree.MyTreeNode;
import model.myTree.ParametarNode;
import model.myTree.ProjekatNode;
import view.MainFrame;
import view.panels.InstallFirstPanel;

public class InstallDialog extends JDialog{
	private ArrayList<ModulNode> listaModula = new ArrayList<>();
	private ArrayList<JCheckBox> listaCheckBoxova = new ArrayList<>();
	private JLabel lbChooseModulNodes = new JLabel("Choose ModulNodes:");
	private JButton btnNext = new JButton("Next");
	private ProjekatNode projekatNode;
	private InstallFirstPanel installFirstPanel;
			
	public static int i = 0;
	static int j = 0;
	
	public InstallDialog(ProjekatNode projekatNode) {
		this.projekatNode = projekatNode;
		setScreen();
		init();
		addActions();
	}
	
	private void setScreen () {
		setSize(new Dimension(300, 200));
		setLocationRelativeTo(null);
	}

	private void init() {
		GridBagLayout gridBagLayout = new GridBagLayout();
		GridBagConstraints gBagConstraints = new GridBagConstraints();
		
		gBagConstraints.insets = new Insets(10, 10, 10, 10);
		j = 0;
		i = 0;
		
		setLayout(gridBagLayout);
		
		gBagConstraints.gridx= 0;
		gBagConstraints.gridy = 0;
		add(lbChooseModulNodes , gBagConstraints);
		
		for(MyTreeNode node : projekatNode.getChildren()){
			if(node instanceof ModulNode) {
					ModulNode module = (ModulNode) node;
					listaModula.add(module);
					listaCheckBoxova.add(new JCheckBox(module.toString()));
					i++;
			}
		}
		
		int count = 0;
		gBagConstraints.gridx = 0;

		for(JCheckBox checkBox: listaCheckBoxova){
			count++;
			gBagConstraints.gridy = count;
			add(checkBox, gBagConstraints);
		}
		
		btnNext.setMinimumSize(new Dimension(70,45));

		gBagConstraints.gridx = 0;
		gBagConstraints.gridy = count + 1;
		
		add(btnNext,gBagConstraints);
	}

	private void addActions() {
		btnNext.addActionListener(new ActionListener() {
		
			@Override
			public void actionPerformed(ActionEvent e) {
				boolean ok = false;
				for(JCheckBox checkBox : listaCheckBoxova){
					if(checkBox.isSelected()){
						ok = true;
					}
				}
				if(ok){
					for(JCheckBox checkBox : listaCheckBoxova){
						if(!checkBox.isSelected()){
							listaModula.remove(j);
							j--;
						}
						j++;
					}
					if(listaModula.size() > 0) {
						setLookAndFeel();
						installFirstPanel = new InstallFirstPanel(listaModula.get(0));
						MainFrame.getInstance().setInstallFirstPanel(installFirstPanel);
						listaModula.remove(0);
						
					}
					dispose();
				}else{
					ActionManager.getInstance().getMessages().noSelectedModel();
				}
			}
		});
	}
	
	public InstallFirstPanel getInstallFirstPanel() {
		return installFirstPanel;
	}	
	private void setLookAndFeel() {
		try {
			for(MyTreeNode node : listaModula.get(0).getChildren()) {
				if(node instanceof ParametarNode) {
					ParametarNode parameter = (ParametarNode) node;
					if(parameter.getType().equals("Look and feel")) {
						LookAndFeelInfo lookAndFeels[] = UIManager.getInstalledLookAndFeels();
						UIManager.setLookAndFeel(lookAndFeels[parameter.getLookAndFeel()].getClassName());
					}else if(parameter.getType().equals("Custom")) {
						LookAndFeelInfo lookAndFeels[] = UIManager.getInstalledLookAndFeels();
						UIManager.setLookAndFeel(lookAndFeels[parameter.getLookAndFeel()].getClassName());
					}
				}
			}
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public ArrayList<ModulNode> getListaModula() {
		return listaModula;
	}
}
